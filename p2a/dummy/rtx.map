
Allocating common symbols
Common symbol       size              file

old_stack           0x4               /tmp/ccvRebTB.o
main_stack          0x1000            /tmp/ccvRebTB.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccvRebTB.o
LOAD rtx.o
LOAD dbug.o
LOAD main_rtx.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000      0x2b0
 *(.text)
 .text          0x10100000       0x1e /tmp/ccvRebTB.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0xbe rtx.o
                0x101000c6                get_process_priority
                0x1010004e                request_memory_block
                0x101000ae                set_process_priority
                0x10100020                send_message
                0x10100066                release_memory_block
                0x10100038                receive_message
                0x10100096                delayed_send
                0x1010007e                release_processor
 *fill*         0x101000de        0x2 00
 .text          0x101000e0       0x5c dbug.o
                0x10100100                rtx_dbug_outs
                0x101000e0                rtx_dbug_out_char
 .text          0x1010013c       0x30 main_rtx.o
                0x1010013c                __main
                0x10100146                main
                0x1010016c                . = ALIGN (0x4)
                0x1010016c                __CTOR_LIST__ = .
                0x1010016c        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x10100170        0x4 LONG 0x0
                0x10100174                __CTOR_END__ = .
                0x10100174                __DTOR_LIST__ = .
                0x10100174        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x10100178        0x4 LONG 0x0
                0x1010017c                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x1010017c       0xd0 rtx.o
 .rodata        0x1010024c       0x54 main_rtx.o
 *(.gcc_except_table)
                0x101002a0                __INIT_SECTION__ = .
                0x101002a0        0x4 LONG 0x4e560000
 *(.init)
                0x101002a4        0x2 SHORT 0x4e5e
                0x101002a6        0x2 SHORT 0x4e75
                0x101002a8                __FINI_SECTION__ = .
                0x101002a8        0x4 LONG 0x4e560000
 *(.fini)
                0x101002ac        0x2 SHORT 0x4e5e
                0x101002ae        0x2 SHORT 0x4e75
                0x101002b0                _etext = .
 *(.lit)

.data           0x101002b0        0x0
 *(.shdata)
 *(.data)
 .data          0x101002b0        0x0 /tmp/ccvRebTB.o
 .data          0x101002b0        0x0 rtx.o
 .data          0x101002b0        0x0 dbug.o
 .data          0x101002b0        0x0 main_rtx.o
                0x101002b0                _edata = .

.bss            0x101002b0     0x1010
                0x101002b0                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x101002b0        0x0 /tmp/ccvRebTB.o
 .bss           0x101002b0        0x0 rtx.o
 .bss           0x101002b0        0x0 dbug.o
 .bss           0x101002b0        0x0 main_rtx.o
 *(COMMON)
 COMMON         0x101002b0     0x1010 /tmp/ccvRebTB.o
                0x101002b0                old_stack
                0x101002c0                main_stack
                0x101012c0                _end = ALIGN (0x8)
                0x101012c0                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000       0x75
 .comment       0x00000000       0x27 rtx.o
 .comment       0x00000027       0x27 dbug.o
 .comment       0x0000004e       0x27 main_rtx.o
