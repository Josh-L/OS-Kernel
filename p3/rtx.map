
Allocating common symbols
Common symbol       size              file

g_queue_slots       0x38              system.o
g_proc_table        0x23e             main_rtx.o
g_mem_blocking_queue
                    0x32              system.o
gp_mem_pool_list    0x80              system.o
old_stack           0x4               /tmp/ccF81vGS.o
g_priority_queues   0x32              system.o
gp_mem_pool_lookup  0x20              system.o
main_stack          0x1000            /tmp/ccF81vGS.o
g_mem_blocking_queue_slots
                    0x38              system.o
g_current_process   0x4               system.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccF81vGS.o
LOAD /tmp/ccenZqrz.o
LOAD /tmp/ccHc3uMg.o
LOAD /tmp/ccwpVpv0.o
LOAD /tmp/cc1L5SRK.o
LOAD /tmp/ccatQUyt.o
LOAD /tmp/ccbwyO7b.o
LOAD /tmp/cc6F7c4U.o
LOAD system.o
LOAD dbug.o
LOAD main_rtx.o
LOAD Hex_to_ASCII.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x1911
 *(.text)
 .text          0x10100000       0x1e /tmp/ccF81vGS.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0x54 /tmp/ccenZqrz.o
                0x10100020                release_proc_trap
 .text          0x10100074        0x8 /tmp/ccHc3uMg.o
                0x10100074                set_proc_priority_trap
 .text          0x1010007c        0x8 /tmp/ccwpVpv0.o
                0x1010007c                get_proc_priority_trap
 .text          0x10100084        0x8 /tmp/cc1L5SRK.o
                0x10100084                request_mem_block_trap
 .text          0x1010008c        0x8 /tmp/ccatQUyt.o
                0x1010008c                release_mem_block_trap
 .text          0x10100094        0x8 /tmp/ccbwyO7b.o
                0x10100094                send_msg_trap
 .text          0x1010009c        0x8 /tmp/cc6F7c4U.o
                0x1010009c                receive_msg_trap
 .text          0x101000a4     0x13ca system.o
                0x1010065a                send_message_trap_handler
                0x101000a4                sys_init
                0x10101456                null_process
                0x10100e78                get_process_priority
                0x10100f7a                request_memory_block
                0x10100a7e                set_process_priority
                0x101005dc                send_message
                0x1010048c                scheduler
                0x1010110a                release_memory_block
                0x1010093e                pop
                0x10100892                receive_message_trap_handler
                0x10101316                message_pop
                0x10100afc                set_process_priority_trap_handler
                0x10101384                message_push
                0x10100822                receive_message
                0x101012fe                delayed_send
                0x10100fd8                request_memory_block_trap_handler
                0x10100594                release_processor
                0x101009ac                push
                0x10100ee6                get_process_priority_trap_handler
                0x10101178                release_memory_block_trap_handler
 *fill*         0x1010146e        0x2 00
 .text          0x10101470       0x5c dbug.o
                0x10101490                rtx_dbug_outs
                0x10101470                rtx_dbug_out_char
 .text          0x101014cc      0x27a main_rtx.o
                0x101014cc                __main
                0x101014d6                main
 *fill*         0x10101746        0x2 00
 .text          0x10101748      0x126 Hex_to_ASCII.o
                0x10101748                printHexAddress
                0x10101870                . = ALIGN (0x4)
 *fill*         0x1010186e        0x2 00
                0x10101870                __CTOR_LIST__ = .
                0x10101870        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x10101874        0x4 LONG 0x0
                0x10101878                __CTOR_END__ = .
                0x10101878                __DTOR_LIST__ = .
                0x10101878        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x1010187c        0x4 LONG 0x0
                0x10101880                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x10101880       0x1c system.o
 .rodata        0x1010189c       0x62 main_rtx.o
 .rodata        0x101018fe        0x3 Hex_to_ASCII.o
 *(.gcc_except_table)
                0x10101901                __INIT_SECTION__ = .
                0x10101901        0x4 LONG 0x4e560000
 *(.init)
                0x10101905        0x2 SHORT 0x4e5e
                0x10101907        0x2 SHORT 0x4e75
                0x10101909                __FINI_SECTION__ = .
                0x10101909        0x4 LONG 0x4e560000
 *(.fini)
                0x1010190d        0x2 SHORT 0x4e5e
                0x1010190f        0x2 SHORT 0x4e75
                0x10101911                _etext = .
 *(.lit)

.data           0x10101914        0x8
 *(.shdata)
 *(.data)
 .data          0x10101914        0x0 /tmp/ccF81vGS.o
 .data          0x10101914        0x0 /tmp/ccenZqrz.o
 .data          0x10101914        0x0 /tmp/ccHc3uMg.o
 .data          0x10101914        0x0 /tmp/ccwpVpv0.o
 .data          0x10101914        0x0 /tmp/cc1L5SRK.o
 .data          0x10101914        0x0 /tmp/ccatQUyt.o
 .data          0x10101914        0x0 /tmp/ccbwyO7b.o
 .data          0x10101914        0x0 /tmp/cc6F7c4U.o
 .data          0x10101914        0x1 system.o
                0x10101914                g_first_run
 *fill*         0x10101915        0x3 00
 .data          0x10101918        0x0 dbug.o
 .data          0x10101918        0x4 main_rtx.o
                0x10101918                g_free_mem
 .data          0x1010191c        0x0 Hex_to_ASCII.o
                0x1010191c                _edata = .

.bss            0x1010191c     0x13da
                0x1010191c                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x1010191c        0x0 /tmp/ccF81vGS.o
 .bss           0x1010191c        0x0 /tmp/ccenZqrz.o
 .bss           0x1010191c        0x0 /tmp/ccHc3uMg.o
 .bss           0x1010191c        0x0 /tmp/ccwpVpv0.o
 .bss           0x1010191c        0x0 /tmp/cc1L5SRK.o
 .bss           0x1010191c        0x0 /tmp/ccatQUyt.o
 .bss           0x1010191c        0x0 /tmp/ccbwyO7b.o
 .bss           0x1010191c        0x0 /tmp/cc6F7c4U.o
 .bss           0x1010191c        0x8 system.o
                0x10101920                g_asmBridge
                0x1010191c                g_kernelStack
 .bss           0x10101924        0x0 dbug.o
 .bss           0x10101924        0x0 main_rtx.o
 .bss           0x10101924        0x0 Hex_to_ASCII.o
 *(COMMON)
 *fill*         0x10101924        0xc 00
 COMMON         0x10101930     0x1010 /tmp/ccF81vGS.o
                0x10101930                old_stack
                0x10101940                main_stack
 COMMON         0x10102940      0x178 system.o
                0x10102940                g_queue_slots
                0x10102978                g_mem_blocking_queue
                0x101029aa                gp_mem_pool_list
                0x10102a2a                g_priority_queues
                0x10102a5c                gp_mem_pool_lookup
                0x10102a7c                g_mem_blocking_queue_slots
                0x10102ab4                g_current_process
 COMMON         0x10102ab8      0x23e main_rtx.o
                0x10102ab8                g_proc_table
                0x10102cf8                _end = ALIGN (0x8)
                0x10102cf8                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(system.bin elf32-m68k)

.comment        0x00000000       0x9c
 .comment       0x00000000       0x27 system.o
 .comment       0x00000027       0x27 dbug.o
 .comment       0x0000004e       0x27 main_rtx.o
 .comment       0x00000075       0x27 Hex_to_ASCII.o
