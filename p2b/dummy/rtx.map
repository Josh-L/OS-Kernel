
Allocating common symbols
Common symbol       size              file

g_queue_slots       0x30              system.o
g_proc_table        0xf0              main_rtx.o
g_mem_blocking_queue
                    0x32              system.o
gp_mem_pool_list    0x8               system.o
old_stack           0x4               /tmp/ccZiBQux.o
g_priority_queues   0x32              system.o
gp_mem_pool_lookup  0x8               system.o
main_stack          0x1000            /tmp/ccZiBQux.o
g_mem_blocking_queue_slots
                    0x30              system.o
g_current_process   0x4               system.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccZiBQux.o
LOAD /tmp/ccUm434S.o
LOAD /tmp/cc7hsJcf.o
LOAD /tmp/ccQZkKhE.o
LOAD /tmp/ccjZQkW3.o
LOAD /tmp/ccu1asWr.o
LOAD /tmp/ccPAxhMP.o
LOAD /tmp/ccITYV0d.o
LOAD system.o
LOAD dbug.o
LOAD main_rtx.o
LOAD Hex_to_ASCII.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x1380
 *(.text)
 .text          0x10100000       0x1e /tmp/ccZiBQux.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0x54 /tmp/ccUm434S.o
                0x10100020                release_proc_trap
 .text          0x10100074        0x8 /tmp/cc7hsJcf.o
                0x10100074                set_proc_priority_trap
 .text          0x1010007c        0x8 /tmp/ccQZkKhE.o
                0x1010007c                get_proc_priority_trap
 .text          0x10100084        0x8 /tmp/ccjZQkW3.o
                0x10100084                request_mem_block_trap
 .text          0x1010008c        0x8 /tmp/ccu1asWr.o
                0x1010008c                release_mem_block_trap
 .text          0x10100094        0x2 /tmp/ccPAxhMP.o
                0x10100094                send_msg_trap
 *fill*         0x10100096        0x2 00
 .text          0x10100098        0x2 /tmp/ccITYV0d.o
                0x10100098                receive_msg_trap
 *fill*         0x1010009a        0x2 00
 .text          0x1010009c      0xf6a system.o
                0x1010009c                sys_init
                0x10100b50                get_process_priority
                0x10100c68                request_memory_block
                0x10100746                set_process_priority
                0x10100598                send_message
                0x10100448                scheduler
                0x10100e1c                release_memory_block
                0x10100606                pop
                0x101007da                set_process_priority_trap_handler
                0x101005fc                receive_message
                0x10100fee                delayed_send
                0x10100cc6                request_memory_block_trap_handler
                0x10100550                release_processor
                0x10100674                push
                0x10100bca                get_process_priority_trap_handler
                0x10100e8c                release_memory_block_trap_handler
 *fill*         0x10101006        0x2 00
 .text          0x10101008       0x5c dbug.o
                0x10101028                rtx_dbug_outs
                0x10101008                rtx_dbug_out_char
 .text          0x10101064      0x166 main_rtx.o
                0x10101064                __main
                0x1010106e                main
 *fill*         0x101011ca        0x2 00
 .text          0x101011cc      0x126 Hex_to_ASCII.o
                0x101011cc                printHexAddress
                0x101012f4                . = ALIGN (0x4)
 *fill*         0x101012f2        0x2 00
                0x101012f4                __CTOR_LIST__ = .
                0x101012f4        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x101012f8        0x4 LONG 0x0
                0x101012fc                __CTOR_END__ = .
                0x101012fc                __DTOR_LIST__ = .
                0x101012fc        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x10101300        0x4 LONG 0x0
                0x10101304                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x10101304       0x15 system.o
 .rodata        0x10101319       0x54 main_rtx.o
 .rodata        0x1010136d        0x3 Hex_to_ASCII.o
 *(.gcc_except_table)
                0x10101370                __INIT_SECTION__ = .
                0x10101370        0x4 LONG 0x4e560000
 *(.init)
                0x10101374        0x2 SHORT 0x4e5e
                0x10101376        0x2 SHORT 0x4e75
                0x10101378                __FINI_SECTION__ = .
                0x10101378        0x4 LONG 0x4e560000
 *(.fini)
                0x1010137c        0x2 SHORT 0x4e5e
                0x1010137e        0x2 SHORT 0x4e75
                0x10101380                _etext = .
 *(.lit)

.data           0x10101380        0x8
 *(.shdata)
 *(.data)
 .data          0x10101380        0x0 /tmp/ccZiBQux.o
 .data          0x10101380        0x0 /tmp/ccUm434S.o
 .data          0x10101380        0x0 /tmp/cc7hsJcf.o
 .data          0x10101380        0x0 /tmp/ccQZkKhE.o
 .data          0x10101380        0x0 /tmp/ccjZQkW3.o
 .data          0x10101380        0x0 /tmp/ccu1asWr.o
 .data          0x10101380        0x0 /tmp/ccPAxhMP.o
 .data          0x10101380        0x0 /tmp/ccITYV0d.o
 .data          0x10101380        0x1 system.o
                0x10101380                g_first_run
 *fill*         0x10101381        0x3 00
 .data          0x10101384        0x0 dbug.o
 .data          0x10101384        0x4 main_rtx.o
                0x10101384                g_free_mem
 .data          0x10101388        0x0 Hex_to_ASCII.o
                0x10101388                _edata = .

.bss            0x10101388     0x11e0
                0x10101388                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x10101388        0x0 /tmp/ccZiBQux.o
 .bss           0x10101388        0x0 /tmp/ccUm434S.o
 .bss           0x10101388        0x0 /tmp/cc7hsJcf.o
 .bss           0x10101388        0x0 /tmp/ccQZkKhE.o
 .bss           0x10101388        0x0 /tmp/ccjZQkW3.o
 .bss           0x10101388        0x0 /tmp/ccu1asWr.o
 .bss           0x10101388        0x0 /tmp/ccPAxhMP.o
 .bss           0x10101388        0x0 /tmp/ccITYV0d.o
 .bss           0x10101388        0x8 system.o
                0x1010138c                g_asmBridge
                0x10101388                g_kernelStack
 .bss           0x10101390        0x0 dbug.o
 .bss           0x10101390        0x0 main_rtx.o
 .bss           0x10101390        0x0 Hex_to_ASCII.o
 *(COMMON)
 COMMON         0x10101390     0x1010 /tmp/ccZiBQux.o
                0x10101390                old_stack
                0x101013a0                main_stack
 COMMON         0x101023a0       0xd8 system.o
                0x101023a0                g_queue_slots
                0x101023d0                g_mem_blocking_queue
                0x10102402                gp_mem_pool_list
                0x1010240a                g_priority_queues
                0x1010243c                gp_mem_pool_lookup
                0x10102444                g_mem_blocking_queue_slots
                0x10102474                g_current_process
 COMMON         0x10102478       0xf0 main_rtx.o
                0x10102478                g_proc_table
                0x10102568                _end = ALIGN (0x8)
                0x10102568                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(system.bin elf32-m68k)

.comment        0x00000000       0x9c
 .comment       0x00000000       0x27 system.o
 .comment       0x00000027       0x27 dbug.o
 .comment       0x0000004e       0x27 main_rtx.o
 .comment       0x00000075       0x27 Hex_to_ASCII.o
